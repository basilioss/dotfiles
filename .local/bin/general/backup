#!/usr/bin/env bash
#
# Description: Archive/encrypt and unarchive folders
# Homepage: https://github.com/basilioss/dotfiles

SOURCE="$HOME/.ssh/ $HOME/.config/gallery-dl/ $HOME/.local/bin/ $HOME/.config/zsh/history /etc/fstab"
BACKUP_DIR="$HOME/main/system/backup"
BACKUP_NAME="$(date +%Y%m%d_%H%M%S)"
CRONTAB=true

function archive {
    cd "$BACKUP_DIR" || exit
    mkdir "$BACKUP_NAME"
    cp -a $SOURCE "$BACKUP_NAME"

    if [ "$CRONTAB" = true ]; then
        crontab -l > "${BACKUP_NAME}/crontab"
    fi

    # Create compressed archive
    tar czf "${BACKUP_NAME}.tar.gz" "$BACKUP_NAME"
    
    # -c: symmetric encryption (use a passphrase)
    # --no-sysmkey-cache: do not cache a passphrase
    # --clipher-algo AES256: improve security algorithm a little
    gpg -c --no-symkey-cache --cipher-algo AES256 "${BACKUP_NAME}.tar.gz"
    exitcode=$?

    if [ "$exitcode" -eq "0" ]; then
        echo "Status: Successful"
    else
        echo "Status: Failed"
    fi

    rm "${BACKUP_NAME}.tar.gz"
    rm -r "$BACKUP_NAME"

    echo -e "\nSize:\n"
    du -hs "$BACKUP_DIR"

    echo -e "\nRemaining disk space:\n"
    df -kh "$BACKUP_DIR"
}

function unarchive {
    FILE="$2"
    FILENAME="${FILE%%.*}"
    ARCHIVE="${FILENAME}.tar.gz"

    gpg "$FILE"

    exitcode=$?

    if [ "$exitcode" -eq "0" ]; then
        tar -xf "$ARCHIVE"
        rm "$ARCHIVE" "${ARCHIVE}.gpg"
        echo "Successfully unarchived"
    else
        echo "ERROR: Incorrect password"
    fi
}

# delete the backup files that are older than five days.
# find "/backupfolder" -type f -mtime +5 -exec rm {} \;

case $1 in
    -a|--archive) archive ;;
    -u|--unarchive) unarchive "$@" ;;
    *) 
        echo "Usage: [-a|--archive] [-u|--unarchive] [file]"
        echo "Examples:"
        echo "  backup -a"
        echo "  backup -u backup-name.tar.gz.gpg"
        ;;
esac
